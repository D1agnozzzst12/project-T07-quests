

УСЛОВИЕ ЗАДАЧИ:

== Получен Quest 6. Добавить программу src/matrix_sort.c, которая сортирует заданную матрицу так,
чтобы сначала шли строки с минимальной суммой элементов, а затем с максимальной. На вход подаются
числа N и M - размерности матрицы и NxM чисел - элементы матрицы. Память под матрицу должна выделяться
динамически одним из 3х способов. И, соответственно, освобождаться в конце работы программы.
В случае любой ошибки выводить «n/a». ==


ВВОДНЫЕ ДАННЫЕ :

1
3 3
4 3 1
9 0 55
-4 7 -10


ПРИ ТАКОМ ВВОДЕ ВЫХОДНЫЕ ДАННЫЕ ДОЛЖНЫ БЫТЬ ТАКИМИ :

-4 7 -10
4 3 1
9 0 55

Я ДУМАЮ ТЫ ПОЙМЕШЬ ЛОГИКУ.


РЕШЕНИЕ ЗАДАЧИ:
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int *row;  // Указатель на строку матрицы
    int sum;   // Сумма элементов строки
} MatrixRow;

// Функция для сравнения двух строк по их сумме
int compare(const void *a, const void *b) {
    MatrixRow *rowA = (MatrixRow *)a;
    MatrixRow *rowB = (MatrixRow *)b;
    return rowA->sum - rowB->sum;  // Сравниваем суммы
}

int main() {
    int testCount;

    // Считываем количество тестов
    if (scanf("%d", &testCount) != 1 || testCount <= 0) {
        printf("n/a\n");
        return 0;
    }

    for (int t = 0; t < testCount; t++) {
        int N, M;

        // Считываем размерности матрицы
        if (scanf("%d %d", &N, &M) != 2 || N <= 0 || M <= 0) {
            printf("n/a\n");
            return 0;
        }

        // Выделяем память для массива структур MatrixRow
        MatrixRow *matrix = (MatrixRow *)malloc(N * sizeof(MatrixRow));
        if (!matrix) {
            printf("n/a\n");
            return 0;
        }

        // Считываем элементы матрицы
        for (int i = 0; i < N; i++) {
            matrix[i].row = (int *)malloc(M * sizeof(int));
            if (!matrix[i].row) {
                for (int j = 0; j < i; j++) {
                    free(matrix[j].row);
                }
                free(matrix);
                printf("n/a\n");
                return 0;
            }

            matrix[i].sum = 0;  // Инициализация суммы
            for (int j = 0; j < M; j++) {
                if (scanf("%d", &matrix[i].row[j]) != 1) {
                    for (int k = 0; k <= i; k++) {
                        free(matrix[k].row);
                    }
                    free(matrix);
                    printf("n/a\n");
                    return 0;
                }
                matrix[i].sum += matrix[i].row[j];  // Считаем сумму элементов
            }
        }

        // Сортируем строки по сумме элементов
        qsort(matrix, N, sizeof(MatrixRow), compare);

        // Выводим отсортированную матрицу
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                printf("%d ", matrix[i].row[j]);
            }
            printf("\n");
            free(matrix[i].row);  // Освобождаем память для строки
        }

        free(matrix);  // Освобождаем память для массива структур
    }

    return 0;
}


